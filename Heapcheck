#include<iostream>
using namespace std;

class Heap
{

	int* arr;

	int capacity;


public:
	int current;

	Heap()
	{

		arr = new int[5];

		capacity = 5;

		current = -1;

	}
	Heap(int size)
	{

		arr = new int[size + 1];

		capacity = size + 1;

		current = -1;

	}
	void insert(int n)
	{


		if (current + 1 == capacity - 1)

		{

			return;

		}


		current++;


		arr[current] = n;

		MinHeapify(current);

	}


	int getParent(int childIndex)
	{

		return (childIndex - 1) / 2;

	}



	void MinHeapify(int child)
	{

		while (child != 0)

		{

			if (arr[child] > arr[getParent(child)])
			{

				return;

			}

			else
			{

				int temp = arr[child];

				arr[child] = arr[getParent(child)];

				arr[getParent(child)] = temp;

				child = getParent(child);

			}
		}
	}

	void MaxHeapify(int child)
	{

		while (child != 0)

		{

			if (arr[child] <= arr[getParent(child)])
			{

				return;

			}

			else
			{

				int temp = arr[child];

				arr[child] = arr[getParent(child)];

				arr[getParent(child)] = temp;

				child = getParent(child);

			}
		}
	}
	void display()
	{

		for (int i = 0; i <= current; i++)

		{

			cout << arr[i] << " ";

		}
	}


	bool MaxCheck()
	{

		int index = 0;

		for (int i = 0; i <= current; i++)
		{

			if (!arr[i])
			{
				return false;
			}

		}

		while (getleftchild(index) <= current || getrightchild(index) <= current)
		{
			if (arr[getleftchild(index)] >= arr[index]) { return false; }
			if (arr[getrightchild(index)] >= arr[index]) { return false; }

			index++;
		}
		return true;




	}




	int getleftchild(int i)
	{

		return (i * 2) + 1;

	}


	int getrightchild(int i)
	{

		return (i * 2) + 2;

	}

	void RunDisplayMinimum(int n){

		DisplayMinimum(0, n);
	}
	void DisplayMinimum(int index, int n)
	{

		if (index > current)
		{
			return;
		}
		else{
			if (arr[index] < n){
				cout << arr[index]<<" ";
			}
			DisplayMinimum(getleftchild(index), n);
			DisplayMinimum(getrightchild(index), n);
		}
	}

	};



	int main()
	{

		Heap heap(8);

		heap.insert(10);

		heap.insert(6);

		heap.insert(8);

		heap.insert(7);

		heap.insert(8);

		heap.insert(1);

		heap.insert(2);

		heap.insert(-1);

		
		heap.RunDisplayMinimum(8);
		system("pause");
		return 0;
	}
